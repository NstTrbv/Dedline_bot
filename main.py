import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime
from dotenv import load_dotenv
from database import init_db, add_deadline, get_user_deadlines
from notifications import send_notifications

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN") or "7054574702:AAEf5aGu-_3JH9v3SoUHZO6IpP9uk_s9jyA"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üéì –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è —É—á—ë–±—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω\n"
        "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã\n\n"
        "–§–æ—Ä–º–∞—Ç: /add –ü—Ä–µ–¥–º–µ—Ç \"–ó–∞–¥–∞–Ω–∏–µ\" –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: /add –ú–∞—Ç–∞–Ω \"–õ–∞–±–∞ 5\" 2025-10-25 23:59"
    )


@dp.message(Command("add"))
async def add_deadline_cmd(message: types.Message):
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            raise ValueError()
        _, subject, task, datetime_str = parts
        task = task.strip('"')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        deadline_date = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
        if deadline_date <= datetime.now():
            await message.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return

        add_deadline(message.from_user.id, subject, task, datetime_str)
        await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü—Ä–∏–º–µ—Ä: /add –ú–∞—Ç–∞–Ω \"–õ–∞–±–∞ 5\" 2025-10-25 23:59\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è!",
            parse_mode="Markdown"
        )


@dp.message(Command("list"))
async def list_deadlines(message: types.Message):
    deadlines = get_user_deadlines(message.from_user.id)
    if not deadlines:
        await message.answer("üì≠ –ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return
    text = "üóì –í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
    for d in deadlines:
        deadline_date = datetime.strptime(d[3], "%Y-%m-%d %H:%M")
        days_left = (deadline_date - datetime.now()).days
        text += f"‚Ä¢ {d[1]}: *{d[2]}* ‚Äî {d[3]} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)\n"
    await message.answer(text, parse_mode="Markdown")


async def main():
    init_db()
    asyncio.create_task(send_notifications(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())